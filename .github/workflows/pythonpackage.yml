name: Python package

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  check_and_test:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python 3
      uses: actions/setup-python@v1
      with:
        python-version: 3.7
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    - name: Format with black
      run: |
        pip install black
        # stop the build if there are Python syntax errors or undefined names
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        black . --check
    - name: Tests
      run: |
        pytest

  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-16.04, macos-latest, windows-latest]
        python: [3.7]
        include:
          - os: ubuntu-16.04
            artifact_name: demo-cli
            slash: "/"
            path_separator: ":"
            cache_location: ~/.cache/pip
          - os: macos-latest
            artifact_name: demo-cli
            slash: "/"
            path_separator: ":"
            cache_location: ~/Library/Caches/pip
          - os: windows-latest
            artifact_name: demo-cli.exe
            slash: "\\"
            path_separator: ";"
            cache_location: ~\AppData\Local\pip\Cache
      fail-fast: true
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python 3
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python }}
      - name: Cache pip modules
        uses: actions/cache@v1
        with:
          path: ${{ matrix.cache_location }}
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Package app
        run: |
          pip install .
          pyinstaller demo${{ matrix.slash }}cli.py --name demo-cli --onefile --add-data="demo/version${{ matrix.path_separator }}demo/version" --hidden-import="pkg_resources.py2_warn"
      - name: Upload artifact
        uses: actions/upload-artifact@v1.0.0
        with:
          name: demo-cli-${{ runner.os }}
          path: dist${{ matrix.slash }}${{ matrix.artifact_name }}

  publish_executable:
    runs-on: ubuntu-latest
    needs: [check_and_test, build]
    steps:
      - uses: actions/download-artifact@v1
        with:
          name: demo-cli-Linux
      - uses: actions/download-artifact@v1
        with:
          name: demo-cli-macOS
      - uses: actions/download-artifact@v1
        with:
          name: demo-cli-Windows
      - run: ls -l .
